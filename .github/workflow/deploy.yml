name: Deploy Documentation

# Triggers
on:
  # Trigger on push to main branch
  push:
    branches:
      - main
  
  # Trigger on pull request
  pull_request:
    branches:
      - main
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'

# Environment variables
env:
  PYTHON_VERSION: '3.9'
  CACHE_NUMBER: 0  # Increment to reset cache

# Permissions
permissions:
  contents: write
  pages: write
  id-token: write

# Concurrency
concurrency:
  group: "pages"
  cancel-in-progress: false

# Jobs
jobs:
  # Build job
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git-revision-date-localized plugin
          
      # Setup Python
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Cache dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v4
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-
            ${{ runner.os }}-pip-
      
      # Upgrade pip
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip --version
      
      # Install dependencies
      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip list
      
      # Cache MkDocs Material files
      - name: Cache MkDocs Material
        uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ hashFiles('**/requirements.txt') }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      
      # Build documentation
      - name: Build documentation
        run: |
          mkdocs build --clean --strict --verbose
          
      # Upload artifacts for debugging
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site/
          retention-days: 7
  
  # Test job
  test:
    name: Test Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Run link checker
        run: |
          pip install linkchecker
          mkdocs build --clean
          linkchecker site/ --check-extern || true
      
      - name: Check spelling
        run: |
          pip install pyspelling
          pyspelling || true
  
  # Deploy job
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_NUMBER }}-
      
      # Install dependencies
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      # Configure git
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
      
      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        run: |
          mkdocs gh-deploy --force --clean --verbose \
            --message "${{ github.event.inputs.deploy_message || 'Deployed {sha}' }}"
      
      # Create deployment status
      - name: Create deployment status
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: '${{ steps.deployment.outputs.page_url }}',
              description: 'Deployment successful'
            });

# Notification job (optional)
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          echo "Build status: ${{ needs.build.result }}"
          echo "Deploy status: ${{ needs.deploy.result }}"
          # Add your notification logic here (Slack, Discord, email, etc.)